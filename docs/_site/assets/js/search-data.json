{"0": {
    "doc": "404 Not Found",
    "title": "404",
    "content": "Page not found :( . The requested page could not be found. &lt; Go home . ",
    "url": "http://localhost:4000/dabbu-server/404.html#404",
    "relUrl": "/404.html#404"
  },"1": {
    "doc": "404 Not Found",
    "title": "404 Not Found",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/404.html",
    "relUrl": "/404.html"
  },"2": {
    "doc": "Getting a file from cache (INTERNAL)",
    "title": "Getting a file from cache (INTERNAL)",
    "content": "GET: /cache/:filePath . | Request parameters: [Compulsory] . | filePath: Path to the file - string | . | Request body: [Empty] . | Response: . | Readable stream of file contents | . | Errors: . | 400: The file path was incorrect - malformedUrl | 404: The file was not found - notFound | 500: Internal server error, used if an uncaught exception appears - internalServerError | . | . To be used only by provider modules that process file content and deliver it in a different format. For example, the Gmail provider module converts a thread into a zip file containing messages and attachments and stores it in cache. To allow clients to retrieve it, it creates a URI with the file path within the cache folder. ",
    "url": "http://localhost:4000/dabbu-server/api/ref/cache_api_ref.html",
    "relUrl": "/api/ref/cache_api_ref.html"
  },"3": {
    "doc": "Creating a new file",
    "title": "Creating a new file",
    "content": "POST: /data/:providerId/:folderPath/:fileName . | Request parameters: [Compulsory] . | providerId: Provider ID - string | folderPath: Path to folder - string | fileName: Name of the file - string | . | Request body: [Posted as multipart form data] . | The request body may contain any fields that the provider requires to execute the request | content: The file content - file-data [Compulsory] | createdAtTime: Time the file was created (may not be supported by all providers) - timestamp [Optional] | lastModifiedTime: Last time the fileâ€™s content or metadata (varies from provider to provider) was changed (may not be supported by all providers) - timestamp [Optional] | . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string }, // The file that was uploaded content: Files object { \"name\": string, \"kind\": enum&lt;string&gt;(file, folder), \"provider\": string, \"path\": string, \"mimeType\": string, \"size\": int, \"createdAtTime\": timestamp, \"lastModifiedTime\": timestamp, \"contentURI\": URI } } . | Errors: . | 409: The file already exists - fileExists | 500: Internal server error, used if an uncaught exception appears - internalServerError | 503: Provider not available - providerNotFound | . | . Using cURL: . $ curl -i -X POST \"http://localhost:8080/dabbu/v1/api/data/&lt;provider_id&gt;/&lt;folder_path&gt;/&lt;file_name&gt;/\" \\ &gt; -H \"Authorization: Bearer &lt;access_token&gt;\" \\ # Only needed if the provider requires authorization &gt; -F \"content=@&lt;path_to_local_file_to_upload&gt;\" \\ # Required &gt; -F \"createdAtTime=2021-06-07T07:06:42Z\" \\ # Optional, if you want to set the createdAtTime of a file &gt; -F \"lastModifiedTime=2021-06-07T07:06:42Z\" \\ # Optional, if you want to set the lastModifiedTime of a file &gt; -F \"field1=value1\" -F \"field2=value2\" # Only needed if the provider requires certain fields . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // The library used to encode the request body as form data // Required only in nodejs environments, not browsers // Add it to your project (if you are using nodejs) using `npm install form-data` const FormData = require('form-data') // The file system library, to create a readable stream of a // file's contents const fs = require('fs') // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' let provider = 'hard_drive' || 'google_drive' || 'one_drive' || 'gmail' let urlEncodedFolderPath = encodeURIComponent('/Downloads') let urlEncodedFileName = encodeURIComponent('dabbu_server_log.txt') // The path to a local file to upload let localFilePath = './dabbu_server_log.txt' // Make a form data object to upload the file's contents let formData = new FormData() // Add the file's data as a readable stream to the content field formData.append('content', fs.createReadStream(localFilePath), { filename: 'dabbu_server_log.txt', }) // Add whatever fields are required by the provider in the request // body here formData.append('field1', 'value1') // If you want to set the createdAtTime or lastModifiedTime of the // file while uploading, add that to the body formData.append('createdAtTime', '2021-06-07T07:06:42Z') formData.append('lastModifiedTime', '2021-06-07T07:06:42Z') // Use the headers that the form-data modules sets let formHeaders = formData.getHeaders() // The URL to send the request to let url = `${server}/dabbu/v1/api/data/${provider}/${urlEncodedFolderPath}/${urlEncodedFileName}` // Send a POST request let res = await axios.post(url, formData, { headers: { ...formHeaders, // The form headers Authorization: `Bearer ${accessToken}`, // Only needed if the provider requires authorization }, }) if (res.status === 200) { // File was created console.log('File created successfully') } else { // Else there was no response from the server or an error was thrown console.log( 'No response from server, error should have been thrown before this' ) } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # To encode the folder path import urllib # The provider ID providerId = 'hard_drive' or 'google_drive' or 'one_drive' or 'gmail' # The folder path folderPath = '/Downloads' # The file name fileName = 'dabbu_server_log.txt' # Open a local file localFileHandle = open('./dabbu_server_log.txt', 'rb') # The URL to send a post request to # If you want to delete a folder, simply omit the file name URL = 'http://localhost:8080/dabbu/v1/api/data/{providerId}/{encodedFolderPath}/{encodedFileName}'.format( providerId = providerId, encodedFolderPath = urllib.parse.quote(folderPath), encodedFileName = urllib.parse.quote(fileName) ) # Make the POST request res = requests.post( url = URL, files = { 'content': localFileHandle }, data = { # In case you want to set the createdAtTime and # lastModifiedTime while uploading the file 'createdAtTime': '2021-06-07T07:06:42Z', 'lastModifiedTime': '2021-06-07T07:06:42Z', # Any additional fields the provider requires 'field1': 'value1' }, headers = { # Only needed if the provider requires authorization 'Authorization': 'Bearer {accessToken}'.format(accessToken = '&lt;access_token&gt;') } ) # Extract the JSON from the response data = res.json() # Parse the response and check if the server created the file if res.ok: print('File successfully created') else: # An error occurred print('An error occurred: {err}'.format(err = res.error)) . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/create_api_ref.html",
    "relUrl": "/api/ref/create_api_ref.html"
  },"4": {
    "doc": "Deleting a file or folder",
    "title": "Deleting a file or folder",
    "content": "DELETE: /data/:providerId/:folderPath/:fileName? . | Request parameters: [Compulsory] . | providerId: Provider ID - string | folderPath: Path to folder (If only folder path is given, then the entire folder with its contents will be deleted) - string | fileName: Name of the file - string [Optional] | . | Request body: [Optional] . | The request body may contain any fields that the provider requires to execute the request | . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string } } . | Errors: . | 404: The file was not found - notFound | 500: Internal server error, used if an uncaught exception appears - internalServerError | 503: Provider not available - providerNotFound | . | . Using cURL: . $ curl -i -X DELETE \"http://localhost:8080/dabbu/v1/api/data/&lt;provider_id&gt;/&lt;folder_path&gt;/&lt;file_name&gt;/\" \\ # omit the file name if you want to delete the folder &gt; -H \"Authorization: Bearer &lt;access_token&gt;\" \\ # Only needed if the provider requires authorization &gt; -d \"field1: value1\" -d \"field2: value2\" # Only needed if the provider requires certain fields . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' let provider = 'hard_drive' || 'google_drive' || 'one_drive' || 'gmail' let urlEncodedFolderPath = encodeURIComponent('/Downloads') let urlEncodedFileName = encodeURIComponent('dabbu_server_log.txt') // The URL to send the request to let url = `${server}/dabbu/v1/api/data/${provider}/${encodedFolderPath}?exportType=media` // Send a DELETE request let res = await axios.delete(url, { // Only needed if the provider requires certain fields, else // skip the data: {...} part entirely data: { field1: 'value1', field2: 'value2', }, // Only needed if the provider requires authorization, else // skip the headers: {...} part entirely headers: { Authorization: `Bearer ${accessToken}`, }, }) // Note: we are not handling errors here as we are using async-await, which // will throw an error if the server returns an error response. // Check if there is a response if (res.data.code === 200) { console.log('File deleted successfully') } else { // Else there was no response from the server or an error was thrown console.log( 'No response from server, error should have been thrown before this' ) } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # To encode the folder path import urllib # The provider ID providerId = 'hard_drive' or 'google_drive' or 'one_drive' or 'gmail' # The folder path folderPath = '/Downloads' # The file name fileName = 'dabbu_server_log.txt' # The URL to send a DELETE request to # If you want to delete a folder, simply omit the file name URL = 'http://localhost:8080/dabbu/v1/api/data/{providerId}/{encodedFolderPath}/{encodedFileName}'.format( providerId = providerId, encodedFolderPath = urllib.parse.quote(folderPath), encodedFileName = urllib.parse.quote(fileName) ) # Make the DELETE request res = requests.delete( url = URL, data = { # Only needed if the provider requires certain # fields in the request body 'field1': 'value1' }, headers = { # Only needed if the provider requires authorization 'Authorization': 'Bearer {accessToken}'.format(accessToken = '&lt;access_token&gt;') } ) # Extract the JSON from the response data = res.json() # Parse the response and check if the server deleted the file if res.ok: print('File successfully deleted') else: # An error occurred print('An error occurred: {err}'.format(err = res.error)) . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/delete_api_ref.html",
    "relUrl": "/api/ref/delete_api_ref.html"
  },"5": {
    "doc": "Gmail",
    "title": "Gmail",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/modules/gmail.html",
    "relUrl": "/modules/gmail.html"
  },"6": {
    "doc": "Gmail",
    "title": "Provider specific fields",
    "content": "Requires an access token of the format Bearer &lt;token&gt; added to the header under the Authorization header field in every request. No fields need to be added to the request body. ",
    "url": "http://localhost:4000/dabbu-server/modules/gmail.html#provider-specific-fields",
    "relUrl": "/modules/gmail.html#provider-specific-fields"
  },"7": {
    "doc": "Gmail",
    "title": "Gmail specific features",
    "content": ". | Labels are treated as folders | Multiple labels can be specified (separated by commas) to search for threads with all the mentioned labels | Threads are files | The thread ID is used to get a thread and all its messages | When getting a specific thread, the provider will create a zip file containing all messages in the thread, along with any inline images and attachments. The messages will be converted to markdown if in html. | . ",
    "url": "http://localhost:4000/dabbu-server/modules/gmail.html#gmail-specific-features",
    "relUrl": "/modules/gmail.html#gmail-specific-features"
  },"8": {
    "doc": "Google Drive",
    "title": "Google Drive",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/modules/google_drive.html",
    "relUrl": "/modules/google_drive.html"
  },"9": {
    "doc": "Google Drive",
    "title": "Provider specific fields",
    "content": "Requires an access token of the format Bearer &lt;token&gt; added to the header under the Authorization header field in every request. No fields need to be added to the request body. ",
    "url": "http://localhost:4000/dabbu-server/modules/google_drive.html#provider-specific-fields",
    "relUrl": "/modules/google_drive.html#provider-specific-fields"
  },"10": {
    "doc": "Google Drive",
    "title": "Google Drive specific features",
    "content": ". | Currently, it is only possible to view and download files and folders shared with you (located in the hidden /Shared folder). Files and folders that you have shared with others will appear in their respective paths in your Drive. Sharing files and folders with others is not yet supported through this server module. | Updating and creating shared files is also not supported. | . ",
    "url": "http://localhost:4000/dabbu-server/modules/google_drive.html#google-drive-specific-features",
    "relUrl": "/modules/google_drive.html#google-drive-specific-features"
  },"11": {
    "doc": "Hard Drive",
    "title": "Hard Drive",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/modules/hard_drive.html",
    "relUrl": "/modules/hard_drive.html"
  },"12": {
    "doc": "Hard Drive",
    "title": "Provider specific fields",
    "content": "Requires a field called base_path in every requestâ€™s body. It is the path to be treated as root by the provider for all paths passed in requests. ",
    "url": "http://localhost:4000/dabbu-server/modules/hard_drive.html#provider-specific-fields",
    "relUrl": "/modules/hard_drive.html#provider-specific-fields"
  },"13": {
    "doc": "HTTP Requests",
    "title": "HTTP Requests",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/ref/",
    "relUrl": "/api/ref/"
  },"14": {
    "doc": "Provider Modules",
    "title": "Provider Modules",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/modules/",
    "relUrl": "/modules/"
  },"15": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Dabbuâ€™s APIs (Application Programming Interfaces) allow you to access your files and folders from any provider (Google Drive, Gmail, Microsoft OneDrive, etc) from a single, unified interface. Behind these APIs is a software layer that connects to these providers and returns your files and folders in one unified format. If you want to use Dabbu to manage your files and folders, go ahead and follow instructions here. If you are a developer or just enthusiastic to learn more about how Dabbu works, read on! . Installing the server &gt; . Understanding the API &gt; . ",
    "url": "http://localhost:4000/dabbu-server/",
    "relUrl": "/"
  },"16": {
    "doc": "Installation and setup",
    "title": "Installation and setup",
    "content": "The Dabbu Server is bundled into a single executable file. It is cross-compiled for Linux, MacOS and Windows. The server accepts requests from clients, interfaces with various providers and returns the requested data to the client. There is a public instance of the server running on Heroku, but it is recommended (and very easy) to download it to your computer and run it. Installation . To install the server on your computer, you can simply download the latest version of the server here. Running it on your computer . On Windows, simply double click the file to run it (it will be a .exe). On Linux/MacOS, mark the file as an executable by running chmod u+x path/to/file. Then simply type in the path to the file in Terminal. Once the server is up and running, open up the URL https://localhost:8080 on your browser. It should show you the text Dabbu Server running on port 8080. Apps (clients) that use the Dabbu API . Now you can download a client that uses the Dabbu API to interact with your files and folders. Here is a list of clients that use the Dabbu API to interact with your files and folders: . | Dabbu CLI - A CLI that leverages the Dabbu API and neatly retrieves your files and folders scattered online. | . Providers supported by Dabbu . Here is a list of providers supported by Dabbu: . | Hard drive | Google drive | Gmail | One drive | . ",
    "url": "http://localhost:4000/dabbu-server/install.html",
    "relUrl": "/install.html"
  },"17": {
    "doc": "Listing files and folders in a specific folder",
    "title": "Listing files and folders in a specific folder",
    "content": "GET: /data/:providerId/:folderPath . | Request parameters: [Compulsory] . | providerId: Provider ID - string | folderPath: Path to folder - string | . | Query parameters: [Optional] . | compareWith: Compare items by a field (specify field name) - string | operator: Only take items with value equal to, less than or greater than the value specified - enum&lt;string&gt; - =, &lt;, &gt; | value: The value of the field the item must be equal to, less than or greater than - string | orderBy: Order by a field (specify field name) - string | direction: The order in which to sort the items - enum&lt;string&gt; - asc, desc | exportType: Type of URI that the content should be returned in; view for opening it in the providerâ€™s editor, media for a download link, other values may be accepted by the provider - string | . | Request body: [Optional] . | The request body may contain any fields that the provider requires to execute the request | . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string }, // Array of files and folders in the specified folder content: [ Files object { \"name\": string, \"kind\": enum&lt;string&gt;(file, folder), \"provider\": string, \"path\": string, \"mimeType\": string, \"size\": int, \"createdAtTime\": timestamp, \"lastModifiedTime\": timestamp, \"contentURI\": URI } ] } . | Errors: . | 400: Bad URL, invalid syntax for query parameters - malformedURL | 404: The folder was not found - notFound | 500: Internal server error, used if an uncaught exception appears - internalServerError | 503: Provider not available - providerNotFound | . | . Using cURL: . $ curl -i -X GET \"http://localhost:8080/dabbu/v1/api/data/&lt;provider id&gt;/&lt;folder path&gt;/?exportType=view\" \\ &gt; -H \"Authorization: Bearer &lt;access_token&gt;\" \\ # Only needed if the provider requires authorization &gt; -d \"field1: value1\" -d \"field2: value2\" # Only needed if the provider requires certain fields . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' let provider = 'hard_drive' || 'google_drive' || 'one_drive' || 'gmail' let urlEncodedFolderPath = encodeURIComponent('/Downloads') // The URL to send the request to let url = `${server}/dabbu/v1/api/data/${provider}/${encodedFolderPath}?exportType=view` // Send a GET request let res = await axios.get(url, { // Only needed if the provider requires certain fields, else // skip the data: {...} part entirely data: { field1: 'value1', field2: 'value2', }, // Only needed if the provider requires authorization, else // skip the headers: {...} part entirely headers: { Authorization: `Bearer ${accessToken}`, }, }) // Note: we are not handling errors here as we are using async-await, which // will throw an error if the server returns an error response. // Check if there is a response if (res.data.content.length &gt; 0) { // Get the files from the response let files = res.data.content // Print the files console.log(JSON.stringify(files)) } else { // Else print out empty folder console.log('Empty folder') } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # To encode the folder path import urllib # The provider ID providerId = 'hard_drive' or 'google_drive' or 'one_drive' or 'gmail' # The folder path folderPath = '/Downloads' # The URL to send a GET request to URL = 'http://localhost:8080/dabbu/v1/api/data/{providerId}/{encodedFolderPath}?exportType=view'.format( providerId = providerId, encodedFolderPath = urllib.parse.quote(folderPath) ) # Make the GET request res = requests.get( url = URL, data = { # Only needed if the provider requires certain # fields in the request body 'field1': 'value1' }, headers = { # Only needed if the provider requires authorization 'Authorization': 'Bearer {accessToken}'.format(accessToken = '&lt;access_token&gt;') } ) # Extract the JSON from the response data = res.json() # Parse the response and check if there are files if res.content.length &gt; 0: # Print the files print(res.content) else: # It is an empty folder print('Empty folder') . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/list_api_ref.html",
    "relUrl": "/api/ref/list_api_ref.html"
  },"18": {
    "doc": "One Drive",
    "title": "One Drive",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/modules/one_drive.html",
    "relUrl": "/modules/one_drive.html"
  },"19": {
    "doc": "One Drive",
    "title": "Provider specific fields",
    "content": "Requires an access token of the format Bearer &lt;token&gt; added to the header under the Authorization header field in every request. No fields need to be added to the request body. ",
    "url": "http://localhost:4000/dabbu-server/modules/one_drive.html#provider-specific-fields",
    "relUrl": "/modules/one_drive.html#provider-specific-fields"
  },"20": {
    "doc": "One Drive",
    "title": "One Drive specific features",
    "content": ". | Currently, it is only possible to view and download files and folders shared with you (located in the hidden /Shared folder). Files and folders that you have shared with others will appear in their respective paths in your Drive. Sharing files and folders with others is not yet supported through this server module. | Updating and creating shared files is also not supported. | . ",
    "url": "http://localhost:4000/dabbu-server/modules/one_drive.html#one-drive-specific-features",
    "relUrl": "/modules/one_drive.html#one-drive-specific-features"
  },"21": {
    "doc": "Getting a list of enabled providers",
    "title": "Getting a list of enabled providers on the server",
    "content": "GET: /providers . | Request parameters: [None] . | Request body: [Empty] . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string }, // Array of enabled provider IDs content: { providers: [ \"provider_id_1\", \"provider_id_2\", ... ] } } . | Errors: [None] . | . Using cURL: . $ curl -i -X GET \"http://localhost:8080/dabbu/v1/api/providers\" . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' // The URL to send the request to let url = `${server}/dabbu/v1/api/providers` // Send a GET request let res = await axios.get(url) // Note: we are not handling errors here as we are using async-await, which // will throw an error if the server returns an error response. // Check if there is a response if (res.data.content.providers.length &gt; 0) { // Get the enabled providers from the response let enabledProviders = res.data.content.providers // Print the enabled providers console.log(enabledProviders) } else { // There are no enabled providers console.log('No providers enabled') } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # The URL to send a GET request to URL = 'http://localhost:8080/dabbu/v1/api/providers' # Make the GET request res = requests.get(url = URL) # Extract the JSON from the response data = res.json() # Parse the response and check if there are any enabled providers if res.content.providers.length &gt; 0: # Print the any enabled providers print(res.content.providers) else: # There are no enabled providers print('No providers enabled') . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/provider_api_ref.html#getting-a-list-of-enabled-providers-on-the-server",
    "relUrl": "/api/ref/provider_api_ref.html#getting-a-list-of-enabled-providers-on-the-server"
  },"22": {
    "doc": "Getting a list of enabled providers",
    "title": "Getting a list of enabled providers",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/ref/provider_api_ref.html",
    "relUrl": "/api/ref/provider_api_ref.html"
  },"23": {
    "doc": "Retrieving a file's data",
    "title": "Retrieving a fileâ€™s data",
    "content": "GET: /data/:providerId/:folderPath/:fileName . | Request parameters: [Compulsory] . | providerId: Provider ID - string | folderPath: Path to folder - string | fileName: Name of the file - string | . | Query parameters: [Optional] . | exportType: Type of URI that the content should be returned in; view for opening it in the providerâ€™s editor, media for a download link, other values may be accepted by the provider - string | . | Request body: [Optional] . | The request body may contain any fields that the provider requires to execute the request | . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string }, // The file that was requested content: Files object { \"name\": string, \"kind\": enum&lt;string&gt;(file, folder), \"provider\": string, \"path\": string, \"mimeType\": string, \"size\": int, \"createdAtTime\": timestamp, \"lastModifiedTime\": timestamp, \"contentURI\": URI } } . | Errors: . | 404: The folder was not found - notFound | 500: Internal server error, used if an uncaught exception appears - internalServerError | 503: Provider not available - providerNotFound | . | . Using cURL: . $ curl -i -X GET \"http://localhost:8080/dabbu/v1/api/data/&lt;provider_id&gt;/&lt;folder_path&gt;/&lt;file_name&gt;/?exportType=media\" \\ &gt; -H \"Authorization: Bearer &lt;access_token&gt;\" \\ # Only needed if the provider requires authorization &gt; -d \"field1: value1\" -d \"field2: value2\" # Only needed if the provider requires certain fields . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' let provider = 'hard_drive' || 'google_drive' || 'one_drive' || 'gmail' let urlEncodedFolderPath = encodeURIComponent('/Downloads') let urlEncodedFileName = encodeURIComponent('dabbu_server_log.txt') // The URL to send the request to let url = `${server}/dabbu/v1/api/data/${provider}/${encodedFolderPath}?exportType=media` // Send a GET request let res = await axios.get(url, { // Only needed if the provider requires certain fields, else // skip the data: {...} part entirely data: { field1: 'value1', field2: 'value2', }, // Only needed if the provider requires authorization, else // skip the headers: {...} part entirely headers: { Authorization: `Bearer ${accessToken}`, }, }) // Note: we are not handling errors here as we are using async-await, which // will throw an error if the server returns an error response. // Check if there is a response if (res.data.content) { // Get the files from the response let file = res.data.content // Refer to the object description above to get the file data // You can fetch the file's content by running another GET // request on the file's contentURI (`file.contentURI`) console.log(JSON.stringify(file)) } else { // Else there was no response from the server or an error was thrown console.log( 'No response from server, error should have been thrown before this' ) } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # To encode the folder path import urllib # The provider ID providerId = 'hard_drive' or 'google_drive' or 'one_drive' or 'gmail' # The folder path folderPath = '/Downloads' # The file name fileName = 'dabbu_server_log.txt' # The URL to send a GET request to URL = 'http://localhost:8080/dabbu/v1/api/data/{providerId}/{encodedFolderPath}/{encodedFileName}?exportType=media'.format( providerId = providerId, encodedFolderPath = urllib.parse.quote(folderPath), encodedFileName = urllib.parse.quote(fileName) ) # Make the GET request res = requests.get( url = URL, data = { # Only needed if the provider requires certain # fields in the request body 'field1': 'value1' }, headers = { # Only needed if the provider requires authorization 'Authorization': 'Bearer {accessToken}'.format(accessToken = '&lt;access_token&gt;') } ) # Extract the JSON from the response data = res.json() # Parse the response and check if the server returned a file if res.content != None: # Refer to the object description above to get the file data # You can fetch the file's content by running another GET # request on the file's contentURI (`file.contentURI`) print(res.content) else: # An error occurred print('An error occurred: {err}'.format(err = res.error)) . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/read_api_ref.html#retrieving-a-files-data",
    "relUrl": "/api/ref/read_api_ref.html#retrieving-a-files-data"
  },"24": {
    "doc": "Retrieving a file's data",
    "title": "Retrieving a file's data",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/ref/read_api_ref.html",
    "relUrl": "/api/ref/read_api_ref.html"
  },"25": {
    "doc": "Understanding the APIs",
    "title": "Understanding the APIs",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/understanding_the_api.html",
    "relUrl": "/api/understanding_the_api.html"
  },"26": {
    "doc": "Understanding the APIs",
    "title": "What is an API?",
    "content": "An API is a set of rules that allow programs/applications to talk to each other, asking for and returning data in a uniform format. REST APIs usually refers to APIs accessible over HTTP/HTTPS. These URLs represent various resources that exist at that particular location (in our case, files and folders) which can be returned in any format (usually JSON/XML). To interact with the resources, there exist various â€˜verbsâ€™ or actions you can perform on the resources over HTTP such as GET, POST, PUT and DELETE. Dabbu â€˜exposesâ€™ a REST API to interact with your files and folders from multiple providers and get them in a single format. You can access these files using simple HTTP requests. ",
    "url": "http://localhost:4000/dabbu-server/api/understanding_the_api.html#what-is-an-api",
    "relUrl": "/api/understanding_the_api.html#what-is-an-api"
  },"27": {
    "doc": "Understanding the APIs",
    "title": "Resources in Dabbu",
    "content": "In Dabbu, all resources are either files or folders. These resources are represented as JSON objects. For example, the following is a representation of a document named â€˜API.txtâ€™ in the â€˜Downloadsâ€™ folder in my Google Drive: . { \"name\": \"API.txt\", // The name of the resource \"kind\": \"file\", // The type of resource (file/folder/other) \"provider\": \"google_drive\", // The provider where the resource is \"path\": \"/Downloads/API.txt\", // The path to the resource within that provider \"mimeType\": \"text/plain\", // The mime type of the file's contents \"size\": 42, // The size in bytes \"createdAtTime\": \"2021-06-07T07:06:42Z\", // The time the file was created \"lastModifiedTime\": \"2021-06-07T07:06:42Z\", // The time the file was last modified (not accessed) \"contentURI\": \"https://www.googleapis.com/files/KLJSF239iDS_ad839LSDJFl?alt=media&amp;source=downloadUrl\" // The content URI to view/download the file } . ",
    "url": "http://localhost:4000/dabbu-server/api/understanding_the_api.html#resources-in-dabbu",
    "relUrl": "/api/understanding_the_api.html#resources-in-dabbu"
  },"28": {
    "doc": "Understanding the APIs",
    "title": "Supported HTTP methods",
    "content": "There are several actions you can perform on resources by making HTTP requests to the API. Dabbu allows you to perform the following actions: . | list files and folders in a folder of a provider [GET] | get information about a particular file at a certain path [GET] | create a file at a certain path [POST] | update the metadata and/or contents of a file at a certain path [PUT] | delete a file or folder at a certain path [DELETE] | . Read on to try out the APIs yourself! . Working with the API &gt; . ",
    "url": "http://localhost:4000/dabbu-server/api/understanding_the_api.html#supported-http-methods",
    "relUrl": "/api/understanding_the_api.html#supported-http-methods"
  },"29": {
    "doc": "Updating a file's metadata and/or contents",
    "title": "Updating a fileâ€™s metadata and/or contents",
    "content": "PUT: /data/:providerId/:folderPath/:fileName . | Request parameters: [Compulsory] . | providerId: Provider ID - string | folderPath: Path to folder - string | fileName: Name of the file - string | . | Request body: [Posted as multipart form data] . | The request body may contain any fields that the provider requires to execute the request | content: The file content - file-data [Optional] | name: The name of the file - string [Optional] | path: The path to the folder in which the file resides - string [Optional] | createdAtTime: Time the file was created (may not be supported by all providers) - timestamp [Optional] | lastModifiedTime: Last time the fileâ€™s content or metadata (varies from provider to provider) was changed (may not be supported by all providers) - timestamp [Optional] | . | Response: . { // HTTP reponse status code \"code\": int, // Only exists if there is an error \"error\": { // The error message (user-friendly) \"message\": string, // The reason for the error (computer-friendly) \"reason\": string }, // The file that was updated (with updated values) content: Files object { \"name\": string, \"kind\": enum&lt;string&gt;(file, folder), \"provider\": string, \"path\": string, \"mimeType\": string, \"size\": int, \"createdAtTime\": timestamp, \"lastModifiedTime\": timestamp, \"contentURI\": URI } } . | Errors: . | 404: The file was not found - notFound | 500: Internal server error, used if an uncaught exception appears - internalServerError | 503: Provider not available - providerNotFound | . | . Using cURL: . $ curl -i -X PUT \"http://localhost:8080/dabbu/v1/api/data/&lt;provider_id&gt;/&lt;folder_path&gt;/&lt;file_name&gt;/\" \\ &gt; -H \"Authorization: Bearer &lt;access_token&gt;\" \\ # Only needed if the provider requires authorization &gt; -F \"content=@&lt;path_to_local_file_to_upload&gt;\" \\ # Optional, if you want to update the file's contents &gt; -F \"name=new_name\" \\ # Optional, if you want to rename the file &gt; -F \"path=/Documents\" \\ # Optional, if you want to move the file &gt; -F \"createdAtTime=2021-06-07T07:06:42Z\" \\ # Optional, if you want to update the createdAtTime of a file &gt; -F \"lastModifiedTime=2021-06-07T07:06:42Z\" \\ # Optional, if you want to update the lastModifiedTime of a file &gt; -F \"field1=value1\" -F \"field2=value2\" # Only needed if the provider requires certain fields . Using NodeJS: . // The library used to make HTTP requests to the Dabbu Server // Add it to your project (if you are using nodejs) using `npm install axios` // For browser, refer to https://github.com/axios/axios#installing const axios = require('axios').default // The file system library, to create a readable stream of a // file's contents (only needed if you want to update the file's // contents) const fs = require('fs') // Get the server address, provider ID and URL encode the folder path let server = 'http://localhost:8080' let provider = 'hard_drive' || 'google_drive' || 'one_drive' || 'gmail' let urlEncodedFolderPath = encodeURIComponent('/Downloads') let urlEncodedFileName = encodeURIComponent('dabbu_server_log.txt') // The path to a local file to upload let localFilePath = './dabbu_server_log.txt' // Make a form data object to upload the file's contents let formData = new FormData() // Add the file's data as a readable stream to the content field // (only if you want to update the file's contents) formData.append('content', fs.createReadStream(localFilePath), { filename: 'dabbu_server_log.txt', }) // Add whatever fields are required by the provider in the request // body here formData.append('field1', 'value1') // If you want to update the name, path, createdAtTime or // lastModifiedTime, add that to the body formData.append('name', 'new_name') formData.append('path', '/Documents') formData.append('createdAtTime', '2021-06-07T07:06:42Z') formData.append('lastModifiedTime', '2021-06-07T07:06:42Z') // Use the headers that the form-data modules sets let formHeaders = formData.getHeaders() // The URL to send the request to let url = `${server}/dabbu/v1/api/data/${provider}/${urlEncodedFolderPath}/${urlEncodedFileName}` // Send a PUT request let res = await axios.put(url, formData, { headers: { ...formHeaders, // The form headers Authorization: `Bearer ${accessToken}`, // Only needed if the provider requires authorization }, }) if (res.status === 200) { // File was created console.log('File created successfully') } else { // Else there was no response from the server or an error was thrown console.log( 'No response from server, error should have been thrown before this' ) } . Using Python: . # Import the requests library # Install it using `pip install requests` # Refer to https://requests.readthedocs.io/en/master/ import requests # To encode the folder path import urllib # The provider ID providerId = 'hard_drive' or 'google_drive' or 'one_drive' or 'gmail' # The folder path folderPath = '/Downloads' # The file name fileName = 'dabbu_server_log.txt' # Open a local file localFileHandle = open('./dabbu_server_log.txt', 'rb') # The URL to send a put request to # If you want to delete a folder, simply omit the file name URL = 'http://localhost:8080/dabbu/v1/api/data/{providerId}/{encodedFolderPath}/{encodedFileName}'.format( providerId = providerId, encodedFolderPath = urllib.parse.quote(folderPath), encodedFileName = urllib.parse.quote(fileName) ) # Make the PUT request res = requests.put( url = URL, files = { 'content': localFileHandle }, data = { # In case you want to update the name, path, createdAtTime or # lastModifiedTime, add that to the body 'name': 'new_name' 'path': '/Documents' 'createdAtTime': '2021-06-07T07:06:42Z', 'lastModifiedTime': '2021-06-07T07:06:42Z', # Any additional fields the provider requires 'field1': 'value1' }, headers = { # Only needed if the provider requires authorization 'Authorization': 'Bearer {accessToken}'.format(accessToken = '&lt;access_token&gt;') } ) # Extract the JSON from the response data = res.json() # Parse the response and check if the server created the file if res.ok: print('File successfully created') else: # An error occurred print('An error occurred: {err}'.format(err = res.error)) . ",
    "url": "http://localhost:4000/dabbu-server/api/ref/update_api_ref.html#updating-a-files-metadata-andor-contents",
    "relUrl": "/api/ref/update_api_ref.html#updating-a-files-metadata-andor-contents"
  },"30": {
    "doc": "Updating a file's metadata and/or contents",
    "title": "Updating a file's metadata and/or contents",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/ref/update_api_ref.html",
    "relUrl": "/api/ref/update_api_ref.html"
  },"31": {
    "doc": "Working with the APIs",
    "title": "Working with the APIs",
    "content": " ",
    "url": "http://localhost:4000/dabbu-server/api/working_with_the_api.html",
    "relUrl": "/api/working_with_the_api.html"
  },"32": {
    "doc": "Working with the APIs",
    "title": "Making an HTTP request to the Dabbu Server",
    "content": "To make a request to the Dabbu Server, you currently have to make a raw HTTP request in your code (for example, using a module like axios in NodeJS or requests in Python) or by using a tool like cURL on the command line or Postman in the browser. Client libraries are a work in progress. Of course, before making the requests, you must download and run the server executable on your computer. Authorization for certain providers . Some providers require authorization, while others donâ€™t. For example, Google Drive, One Drive and Gmail require OAuth2 authorization, while the Hard Drive provider does not need any authorization. Currently, if a provider needs authorization, the client application is responsible to gain user consent to access their Google Drive/One Drive/Gmail and obtain an access token and refresh token from the provider. Once the client application gains an access token from the respective provider, they can pass the access token to the server in the â€˜Authorizationâ€™ header. The provider on the server will use this access token to perform the specified operation on the userâ€™s files in that drive. This will be changed with the addition of client libraries, which will handle some part of the authorization process, including making initial requests with a client ID and secret and subsequently refreshing the access token once it expires. To see an example of how a client could handle authorization (without the upcoming client libraries), take a look at Dabbu CLI. HTTP Methods . Dabbu Server uses the GET, POST, PUT and DELETE methods on all resources. To get an overview of what each does, the input and output, and code examples, take a look at the HTTP Requests section. Notes on making HTTP requests . Always ensure that all folder paths are delimited with a forward slash and not a back slash. Always ensure that the provider ID, folder path, file name and query parameters are URL encoded. Always ensure you have supplied required fields in the request body and request headers for that particular provider. For example, the Hard Drive requires a field in the request body called base_path, containing the path to the folder to treat as root while retrieving a resource. For details on what provider requires what fields/headers, take a look at the Provider Modules section. Read on to see how to make requests using curl, nodejs and python. HTTP requests and code samples &gt; . ",
    "url": "http://localhost:4000/dabbu-server/api/working_with_the_api.html#making-an-http-request-to-the-dabbu-server",
    "relUrl": "/api/working_with_the_api.html#making-an-http-request-to-the-dabbu-server"
  }
}
